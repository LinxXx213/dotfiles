" VIM Configuration file
" Created by Tommy H. Olsen
" See all of my dotfiles at http://github.com/tommy-dk/dotfiles
"
" CUSTOM KEY BINDINGS:
"
" F1                Esc
" F2                Toogle Gundo tree on/off
" F3                Toggle relative/absolute numbering
" F8                Toggle NerdTree on/off
" F11               Toggle paste on/off
" F12               :make
"
" Leader: , (comma)
"
" <leader>ig        Toggle indent guides on/off
" <leader>h         Hide search highlighting
" <leader>dns       Update/increment serialnumber in a bindzone
" <leader>gv        Open gitv in file mode
" <leader>gV        Open gitv in browse mode
"
" Ctrl-t            New tab
" Ctrl-Right        Next tab
" Ctrl-Left         Previous tab
" Ctrl-Up           Move selected line(s) up
" Ctrl-Down         Move selected line(s) down
" Ctrl-h            Execute highlighted Python code
" Ctrl-k            Insert random generated password
" :w!!              Really write! When you forget to sudo first...
"
" gu                Open URL under cursor
" gg                Search Google for word under cursor
" gw                Search Wikipedia for word under cursor
" gp                Search PHP.net for word under cursor
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Appearance
let g:molokai_original = 0
set t_Co=256
colorscheme molokai
set background=dark

" Statusline configuration
if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\ " Filename
    set statusline+=%w%h%m%r " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y] " filetype
    set statusline+=\ [%{getcwd()}] " current dir
    "set statusline+=\ [A=\%03.3b/H=\%02.2B] " ASCII / Hexadecimal value of char
    set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif


" defaults for everything
set backspace=indent,eol,start					" yeah.
set nostartofline								" yeah, sure
set ruler										" always show ruler
set showcmd										" tell me what i'm doing
set showmatch									" where'd the opening ')' go?
set showmode									" where am i?
set history=150         						" keep 150 lines of command line history
set nowrap                                      " wrapping off!
set hlsearch                                    " when searching hilight the word

set backup										" keep a backup file
set backupdir=~/.vim/backupfiles/				" backup dir
set backupext=~         						" backup extension

if has("undofile")
    set undofile
    set undodir=~/.vim/undo
endif
set undolevels=1000  							" undoing 1000 changes should be enough :-)

set dir=~/.vim/tmp                              " put .swp-files in ~/tmp

set tabstop=4									" tabs at 4 spaces
set shiftwidth=4                                " Number of spaces to use for each step of (auto)indent.
set textwidth=0 "79								" textwidth
set noerrorbells								" no fucking bell
set guioptions='m'								" no gui at all
set lazyredraw									" do not update screen while executing commands
set updatecount=200  							" write swap file to disk after each 200 characters
set updatetime=6000  							" write swap file to disk after 5 inactive seconds

set wildmode=longest,list,full                  " when searching for a file to edit

" Indenting and tab settings
" " I prefer a 4 spaces indent instead of long tabs, see
" " http://www.jwz.org/doc/tabs-vs-spaces.html for some good reasons.
"
set expandtab           " insert spaces when hitting <tab>
set smarttab            " a <Tab> in front of a line inserts blanks according to 'shiftwidth'.
set autoindent          " always autoindent on
set smartindent         " smartindent! :)


"       suffixes:    Ignore filename with any of these suffixes
"                    when using the ":edit" command.
"                    Most of these are files created by LaTeX.
set suffixes=.aux,.bak,.dvi,.gz,.idx,.ps,.swp,.tar


" this viminfo feature is really annoying, disable it
set viminfo=

" case only matters with mixed case expressions
set ignorecase
set smartcase

set visualbell

"       t_vb:  terminal's visual bell - turned off to make Vim quiet!
"       Please use this as to not annoy co-workers in the same room.
"       Thankyou!  :-)
set t_vb=

" Loads the filetype plugins, see :help add-filetype-plugin for more info
filetype plugin indent on

" GUI
if has('gui_running')
  source $VIMRUNTIME/mswin.vim
endif

" \ is the default leader character
let mapleader = ","

" Use pathogen.vim to manage and load plugins
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" disable warnings from NERD:
let g:NERDShutUp = 1
let g:NERDTreeWinSize = 40
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']

" vim indent guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" Toggle numbering
let g:NumberToggleTrigger="<F3>"

" SuperTab, Tab completion ...
if version >= 700 && exists("g:SuperTabDefaultCompletionType")
    "let g:SuperTabDefaultCompletionType = "context"
    set completeopt=menu
else
    " See more: http://www.vim.org/tip_view.php?tip_id=102
    function! InsertTabWrapper()
        let col = col('.') - 1
        if !col || getline('.')[col - 1] !~ '\k'
            return "\<tab>"
        else
            return "\<c-p>"
        endif
    endfunction
    inoremap <tab> <c-r>=InsertTabWrapper()<CR>
endif


" For Syntax highligting:
if has("syntax")
	syntax on
endif

" Autocmd
if has("autocmd")
    " wrap at 79 and autoindent for c, html, perl, and php
    autocmd BufNewFile,BufRead *.pl,*.cgi,*.php*,*.*html*,*.c,*.h set tw=79 autoindent

    " email gets wrapped at 68 and tabs get expanded
    autocmd BufNewFile,BufRead /tmp/mutt* set tw=68 et

    " cvs commit messages get wrapped at 68 and tabs get expanded
    autocmd BufNewFile,BufRead /tmp/cvs* set tw=68 et

    " makefiles and c
    autocmd BufNewFile,BufRead Makefile,*.c,*.h,*.cpp set ts=4

    " Automatically load .vimrc source when saved
    autocmd BufWritePost .vimrc source $MYVIMRC

    " Skeleton files:
    autocmd BufNewfile *.c          0r ~/.vim/skeleton.c
    autocmd BufNewfile *.h          0r ~/.vim/skeleton.h
    autocmd BufNewfile *.cc         0r ~/.vim/skeleton.cc
    autocmd BufNewfile *.hh         0r ~/.vim/skeleton.hh
    autocmd BufNewfile *.java       0r ~/.vim/skeleton.java
    autocmd BufNewFile *.html       0r ~/.vim/skeleton.html
    autocmd BufNewfile *.tex        0r ~/.vim/skeleton.tex
    autocmd BufNewfile *.py         0r ~/.vim/skeleton.py

    " Python definitions
    autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,with,try,except,finally,def,class
    autocmd FileType python setl autoindent tabstop=4 expandtab shiftwidth=4 softtabstop=4

    " Change mode on scripts
    autocmd BufWritePost * call ModeChange()

    " Update / increment DNS serial with ,dns
    if has("python")
        autocmd FileType bindzone map <leader>dns :python updateDnsSerial()<CR>
    endif

    " Automatically cd into the directory that the file is in
    "autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

    " Remove any trailing whitespace that is in the file
    autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
endif


"
" Mappings
"

" open URL under cursor in browser
nnoremap gu :OpenURL <cfile><CR>
nnoremap gg :OpenURL http://www.google.com/search?q=<cword><CR>
nnoremap gw :OpenURL http://en.wikipedia.org/wiki/Special:Search?search=<cword><CR>
nnoremap gp :OpenURL http://php.net/<cword><CR>

" Hide search highlighting
map <Leader>h :set invhls<CR>

" No Help, please
nmap <F1> <Esc>

" Toggle Gundo tree
nnoremap <F2> :GundoToggle<CR>

" Mapping for fast Make-compile-edit cycles
map <F12> :make<CR>

" Toggle paste on/off on F11
set pastetoggle=<F11>

" Move single line
nmap <C-Up> [e
nmap <C-Down> ]e

" Move multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Close tab
" nnoremap <silent> <C-w> :tabclose<CR>

" map F8 to NerdTree open/close
nmap <silent> <F8> :NERDTreeToggle<CR>
map <C-k> :python GenPassword()
"imap <C-k> <Esc>:python GenPassword()<CR>9li

" git / gitv shortcuts
nmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
cabbrev git Git
highlight diffAdded guifg=#00bf00
highlight diffRemoved guifg=#bf0000

" Ctrl-h to execute hilighted python code
python << EOF
import vim
def EvaluateCurrentRange():
    eval(compile('\n'.join(vim.current.range),'','exec'),globals())
EOF
map <C-h> :py EvaluateCurrentRange()<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

iab THO Tommy Heyde Olsen
iab <br> <br />

" whenever you type "%" you jump to the matching object AND you visually
" select all the text in between. See more:
" http://www.vim.org/tip_view.php?tip_id=6
noremap % v%

" Internal functions
"
" automatically give executable permissions if file begins with #! and contains
" '/bin/' in the path
" Uses an autocmd
function! ModeChange()
  if getline(1) =~ "^#!"
    if getline(1) =~ "/bin/"
      silent !chmod a+x <afile>
    endif
  endif
endfunction

" automatically update SOA records in DNS zones
if has("python")
python << EOF
def updateDnsSerial():
    import re, time, vim, string

    maxSearch = 20
    cb = vim.current.buffer
    foundSoa = 0
    for i in xrange(0, min(maxSearch, len(cb))):
        line = cb[i]
        if foundSoa:
            #  look for serial
            rx = re.match(r'^\s*(\d+).*', line)
            if not rx:
                print 'Unable to find Serial'
                return
            serial = rx.group(1)
            #  generate new serial
            now = time.time()
            today = time.strftime('%Y%m%d01', time.localtime(now))
            todayVal = long(today)
            serialVal = long(serial)
            if todayVal <= serialVal: todayVal = serialVal + 1

            #  update serial
            cb[i] = string.replace(line, serial, '%d' % todayVal)

            #  display update string
            print 'Updated serial from "%s" to "%d"' % ( serial, todayVal )
            break
        if re.match(r'^@.+IN\s+SOA\s+', line): foundSoa = 1
EOF
endif

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff <wouter@blub.net>
" http://vim.wikia.com/wiki/Vim_Gpg
augroup encrypted
    au!
    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre      *.gpg set bin
    autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPre,FileReadPre      *.gpg let shsave=&sh
    autocmd BufReadPre,FileReadPre      *.gpg let &sh='sh'
    autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt --default-recipient-self 2> /dev/null
    autocmd BufReadPost,FileReadPost    *.gpg let &sh=shsave
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost    *.gpg set nobin
    autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre    *.gpg set bin
    autocmd BufWritePre,FileWritePre    *.gpg let shsave=&sh
    autocmd BufWritePre,FileWritePre    *.gpg let &sh='sh'
    autocmd BufWritePre,FileWritePre    *.gpg '[,']!gpg --encrypt --default-recipient-self 2>/dev/null
    autocmd BufWritePre,FileWritePre    *.gpg let &sh=shsave
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost  *.gpg   silent u
    autocmd BufWritePost,FileWritePost  *.gpg set nobin
augroup END

" password generator
python << EOF
from random import choice
import vim
import string
def GenPassword(length=8, chars=string.letters + string.digits):
    vim.current.line = ''.join([choice(chars) for i in range(length)])
EOF

" no comments in configuration files
" http://www.debian-administration.org/articles/616
"set fdm=expr
"set fde=getline(v:lnum)=~'^\\s*#'?1:getline(prevnonblank(v:lnum))=~'^\\s*#'?1:getline(nextnonblank(v:lnum))=~'^\\s*#'?1:0

" Helper function for opening urls under the cursor
function! OpenURL(url)
  if has("win32")
    exe "!start cmd /cstart /b ".a:url.""
  elseif $DISPLAY !~ '^\w'
    exe "silent !sensible-browser \"".a:url."\""
  else
    exe "silent !sensible-browser -T \"".a:url."\""
  endif
  redraw!
endfunction
command! -nargs=1 OpenURL :call OpenURL(<q-args>)

